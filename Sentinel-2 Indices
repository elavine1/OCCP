// Define some variables
var boundingBox = ee.Geometry.Rectangle([-119.984, 49.032, -119.032, 50.001]);
var AOI = ee.Geometry.Point(-119.032, 50.001);
var geometry = ee.FeatureCollection("users/geodesicsolutionsel/Okanagan_Study_Area");
var lakes = ee.FeatureCollection("users/geodesicsolutionsel/FWLKSPL_polygon");
var rivers = ee.FeatureCollection("users/geodesicsolutionsel/FWRVRSPL_polygon");
var water = lakes.merge(rivers)
var s2bands = ['B11', 'B8', 'B4', 'B3'];
var START_DATE = '2019-04-01'
var END_DATE = '2019-10-31'
var CLOUD_FILTER = 100
var CLD_PRB_THRESH = 30
var NIR_DRK_THRESH = 0.15
var CLD_PRJ_DIST = 1
var BUFFER = 50

function get_s2_sr_cld_col(aoi, start_date, end_date) {
    // # Import and filter S2 SR.
    var s2_sr_col = (ee.ImageCollection('COPERNICUS/S2_SR')
        .filterBounds(aoi)
        .filterDate(start_date, end_date)
        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CLOUD_FILTER)))

    // # Import and filter s2cloudless.
    var s2_cloudless_col = (ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
        .filterBounds(aoi)
        .filterDate(start_date, end_date))

    // # Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.
    return ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply({
        'primary': s2_sr_col,
        'secondary': s2_cloudless_col,
        'condition': ee.Filter.equals({
            'leftField': 'system:index',
            'rightField': 'system:index'
        })
    }))
}


function add_cloud_bands(img) {
    // # Get s2cloudless image, subset the probability band.
    var cld_prb = ee.Image(img.get('s2cloudless')).select('probability')

    // # Condition s2cloudless by the probability threshold value.
    var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds')

    // # Add the cloud probability layer and cloud mask as image bands.
    return img.addBands(ee.Image([cld_prb, is_cloud]))
    
}


function add_shadow_bands(img) {
    // # Identify water pixels from the SCL band.
    var not_water = img.select('SCL').neq(6)

    // # Identify dark NIR pixels that are not water (potential cloud shadow pixels).
    var SR_BAND_SCALE = 1e4
    var dark_pixels = img.select('B8').lt(NIR_DRK_THRESH*SR_BAND_SCALE).multiply(not_water).rename('dark_pixels')

    // # Determine the direction to project cloud shadow from clouds (assumes UTM projection).
    var shadow_azimuth = ee.Number(90).subtract(ee.Number(img.get('MEAN_SOLAR_AZIMUTH_ANGLE')));

    // # Project shadows from clouds for the distance specified by the CLD_PRJ_DIST input.
    var cld_proj = (img.select('clouds').directionalDistanceTransform(shadow_azimuth, CLD_PRJ_DIST*10)
        .reproject({'crs': img.select(0).projection(), 'scale': 100})
        .select('distance')
        .mask()
        .rename('cloud_transform'))

    // # Identify the intersection of dark pixels with cloud shadow projection.
    var shadows = cld_proj.multiply(dark_pixels).rename('shadows')

    // # Add dark pixels, cloud projection, and identified shadows as image bands.
    return img.addBands(ee.Image([dark_pixels, cld_proj, shadows]))
}


function add_cld_shdw_mask(img) {
    // # Add cloud component bands.
    var img_cloud = add_cloud_bands(img)

    // # Add cloud shadow component bands.
    var img_cloud_shadow = add_shadow_bands(img_cloud)

    // # Combine cloud and shadow mask, set cloud and shadow as value 1, else 0.
    var is_cld_shdw = img_cloud_shadow.select('clouds').add(img_cloud_shadow.select('shadows')).gt(0)

    // # Remove small cloud-shadow patches and dilate remaining pixels by BUFFER input.
    // # 20 m scale is for speed, and assumes clouds don't require 10 m precision.
    is_cld_shdw = (is_cld_shdw.focal_min(2).focal_max(BUFFER*2/20)
        .reproject({'crs': img.select([0]).projection(), 'scale': 20})
        .rename('cloudmask'))

    // # Add the final cloud-shadow mask to the image.
    return img_cloud_shadow.addBands(is_cld_shdw)
}



function apply_cld_shdw_mask(img) {
    // # Subset the cloudmask band and invert it so clouds/shadow are 0, else 1.
    var not_cld_shdw = img.select('cloudmask').not()

    // # Subset reflectance bands and update their masks, return the result.
    return img.select('B.*').updateMask(not_cld_shdw)
}

// Run functions
var s2_sr_cld_col = get_s2_sr_cld_col(AOI, START_DATE, END_DATE)
var s2_sr_median = (s2_sr_cld_col.map(add_cld_shdw_mask)
                             .map(apply_cld_shdw_mask)
                             .median())

// Clip the image in a specified boundary.
var clippedlayer = s2_sr_median.clip(geometry);

//Center the map view on a given AOI with the zool level.
// Map.centerObject(AOI, 13);   

// Map.addLayer(s2_sr_median, 
//   {'bands': ['B5', 'B5', 'B3'], 'min': 0, 'max': 2500}, 'S2 cloud-free mosaic');



// Generate and Map Indices
var image = ee.Image(s2_sr_median);
var swir1 = image.select('B11');
var nir = image.select('B8');
var red = image.select('B4');
var green = image.select('B3');
// NDVI of each Sentinel 2 image
var ndvi = nir.subtract(red).divide(nir.add(red));
// MNDWI of each Sentinel 2 image
var MNDWI = green.subtract(swir1).divide(green.add(swir1));
// NDWI of each Sentinel 2 image
var NDWI = green.subtract(nir).divide(green.add(nir))
// Map.addLayer(NDWI, {min: 0, max: 1, palette: ['black', 'yellow', 'green']}, 'Sentinel 2 Image MNDWI ');
// Map.addLayer(MNDWI, {min: 0, max: 1, palette: ['black', 'yellow', 'green']}, 'Sentinel 2 Image MNDWI ');
// Map.addLayer(ndvi, {min: 0, max: 1, palette: ['black', 'yellow', 'green']}, 'Sentinel 2 Image NDVI ');

// Export and save to drive
Export.image.toDrive({
  image: ndvi,
  description: 'NDVI-S2',
  scale: 10,
  fileFormat: 'GeoTIFF',
  region: geometry,
  folder: 'OCCP',
  maxPixels: '1000000000'
});
Export.image.toDrive({
  image: MNDWI,
  description: 'MNDWI-S2',
  scale: 10,
  fileFormat: 'GeoTIFF',
  region: geometry,
  folder: 'OCCP',
  maxPixels: '1000000000'
});
Export.image.toDrive({
  image: NDWI,
  description: 'NDWI-S2',
  scale: 10,
  fileFormat: 'GeoTIFF',
  region: geometry,
  folder: 'OCCP',
  maxPixels: '1000000000'
});
